name: Workflow
on:
  push:
    branches:
      - feat-devsecops

jobs:
  SAST:
    runs-on: ubuntu-latest
    steps:

    - name: Set up Node.js 20
      uses: actions/setup-node@v2
      with:
        node-version: '20'

    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        distribution: 'adopt'
        java-version: '17'

    - name: Install SonarCloud Scanner locally
      run: npm install sonar-scanner --save-dev
  

    - name: Run SonarCloud analysis
      run: |
        npx sonar-scanner \
        -Dsonar.projectKey=dusankm_Laboratorio-final \
        -Dsonar.organization=dusankm \
        -Dsonar.sources=. \
        -Dsonar.host.url=https://sonarcloud.io \
        -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
        -Dsonar.branch.name=feat-devsecops

    - name: SonarQube Quality Gate Check
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      uses: SonarSource/sonarqube-quality-gate-action@v1.1.0
      with:
        scanMetadataReportFile: './.scannerwork/report-task.txt'


#-----------------------SCA--------------------------------------
  SCA:
    #needs: SAST
    runs-on: ubuntu-latest
    steps:

    - name: Set up Node.js 20
      uses: actions/setup-node@v2
      with:
        node-version: '20'

    - name: Checkout code
      uses: actions/checkout@v2

    - name: Run Snyk to check for vulnerabilities
      id: snyk_scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --all-projects --severity-threshold=high --json > snyk-output.json


#-----------------------Docker Build Image------------------------------------

  DockerBuild:
    needs: [SCA, SAST]
    runs-on: ubuntu-latest
    steps:

    - name: Checkout code
      uses: actions/checkout@v2

    - name: Docker Login
      uses: docker/login-action@v3.1.0
      with:
        username: ${{ secrets.DOCKER_USER }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build Docker
      run: |
        docker build --tag dusankm/netflix-app:latest .

    - name: Push Docker
      run: |
        docker push dusankm/netflix-app:latest

  
#-------------------- Docker Scan ------------------------------------------

  DockerScan:
    needs: DockerBuild
    runs-on: ubuntu-latest
    steps:

    - name: Docker Login
      uses: docker/login-action@v3.1.0
      with:
        username: ${{ secrets.DOCKER_USER }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Pull de la Imagen Docker
      run: | 
        docker pull dusankm/netflix-app:latest

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'dusankm/netflix-app:latest'
        format: 'table'
        exit-code: '1'
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'CRITICAL,HIGH'

    - name: Push Docker
      run: |
        docker push dusankm/netflix-app:latest

    #-------------------- Deploy  ------------------------------------------

  Deploy:
    needs: DockerScan
    runs-on: self-hosted
    steps: 
        - name: Clonacion de codigo
          uses: actions/checkout@v4
        - name: Despliegue
          run: |
            kubectl apply -f ./Kubernetes/deployment.yml
            
  #-------------------- Dast  ------------------------------------------

  DAST:
    #needs: DockerScan
    runs-on: self-hosted
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
  
    - name: Start Application
      run: |
          docker run -d --name netflix-app -p 8080:80 dusankm/netflix-app:latest
          sleep 15 # Give the application some time to start
  
    - name: ZAP Scan
      uses: zaproxy/action-baseline@v0.12.0
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        docker_name: 'ghcr.io/zaproxy/zaproxy:stable'
        target: 'http://localhost:8080'
        rules_file_name: '.zap/rules.tsv'
        cmd_options: '-a'
        allow_issue_writing: false
  
    - name: Upload ZAP Report
      uses: actions/upload-artifact@v2
      with:
        name: zap-report
        path: zap_report.html
  
    - name: Check for High Severity Vulnerabilities
      run: |
        # Check if ZAP found any high severity issues
        if grep -q 'High' zap_report.html; then
          echo "High severity vulnerabilities found in ZAP scan."
          exit 1
        else
          echo "No high severity vulnerabilities found in ZAP scan."
        fi
